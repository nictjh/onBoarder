For ticketing:

2 Tables??:
1 for the normal input

This info from first table will send to pending
then after I will keep check of pending and send to my main admin user to verify before putting it into my dictionary




Current Databases:
1. dictionary
2. tele-user
3. pending


The plan:
- Can add a function to move words to from a specific table to another (Done)
- Add a function to remove words from specific table (Done)
- Add a delete row function (Done)


What do I need in my pending table?
- submittedText
- userName
- user_id
** Can allow for duplicates


* Send out message immediately after it enters pending to admin
handle duplicates? (Possible direction to look at..., so everytime there is a addition i will send a notif to admin)
- Maybe I pop the first row ? (Proceeded with this method)
- Map the broadcast call onto all my data points?

broadcast_ticket() ->
1. Get my case details (Done)
2. Send message to admin (Done)


When do i broadcast it? (Done)
- update my button function to handle "acceptWord" and "rejectWord" (Done)

- Need to check my data when i select id (data[1][0] will give me the first entry that is according to my id)
    - Maybe i can consider, just popping values off the pending table, send notif to admin to call the authorising message


1. After ticket submission: send a normal message to admin containing the command for the authorisation message (Done)
2. In my broadcast_ticket() function i should change it to pop out maybe 1-3 words to confirm (Done)
3. Handle my acceptWord and rejectWord (Done)


Possible improvements (Lazy do)
1. Updating of states (Halfway, can try to remove typing_state and use the db state instead?)
    - Add in searching into unknown which will call



Future plans:
1. Look into reading excel file and pushing whole dataset up to db (Make it unique for superadmins to do so only!)
    - Maybe through password


- Updating users on the status of their tickets (Done)
- I have to make check a admin call only (for future implementation)


One bug spotted:
- Need to handle the duplication of short forms in the table itself